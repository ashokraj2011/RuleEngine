# file: graphql_metadata_model.py

from dataclasses import dataclass, field, asdict
from typing import List, Optional, Dict, Any
import json
from sqlalchemy import create_engine, Column, String, Text, Boolean, MetaData, Table
from sqlalchemy.orm import declarative_base, Session

Base = declarative_base()

@dataclass
class Attribute:
    attributeName: str
    dataType: str
    jsonPath: str
    queryPath: Optional[str] = None
    propertygroup: Optional[str] = None

@dataclass
class PropertyGroup:
    name: Optional[str] = None
    attributelist: List[Attribute] = field(default_factory=list)

@dataclass
class Filter:
    name: str
    dataType: str
    isMandatory: bool

@dataclass
class RegisteredAttributeNamespace:
    namespace: str
    attributeList: List[Attribute] = field(default_factory=list)
    filters: List[Filter] = field(default_factory=list)
    propertygroups: List[PropertyGroup] = field(default_factory=list)

@dataclass
class GlossaryEntry:
    dataSourceName: str
    rootQuery: str
    registeredAttributes: List[RegisteredAttributeNamespace] = field(default_factory=list)

@dataclass
class SchemaDataSource:
    dataSource: str
    name: str
    rootQuery: str
    params: Dict[str, Any] = field(default_factory=dict)

@dataclass
class SchemaEntity:
    dataSource: str
    entityName: str
    filters: Dict[str, str]
    gquery: str

@dataclass
class SchemaEntityAttribute:
    dataSource: str
    entityName: str
    attributeName: str
    parentAttributeName: Optional[str] = None
    source: Optional[str] = None
    rateLimit: Optional[str] = None

@dataclass
class SchemaAttributeGrant:
    dataSource: str
    entityName: str
    teamName: str
    allow_flag: bool

# ---- SQLAlchemy ORM tables ----
class SchemaDataSourceDB(Base):
    __tablename__ = "schema_data_source"
    dataSource = Column(String, primary_key=True)
    name = Column(String)
    rootQuery = Column(Text)

class SchemaEntityDB(Base):
    __tablename__ = "schema_entity"
    dataSource = Column(String, primary_key=True)
    entityName = Column(String, primary_key=True)
    filters = Column(Text)
    gquery = Column(Text)

class SchemaEntityAttributeDB(Base):
    __tablename__ = "schema_entity_attribute"
    dataSource = Column(String, primary_key=True)
    entityName = Column(String, primary_key=True)
    attributeName = Column(String, primary_key=True)
    parentAttributeName = Column(String)
    source = Column(String)
    rateLimit = Column(String)

# ---- PARSER ----
def parse_json_to_models(json_str: str):
    raw = json.loads(json_str.replace('\n', '').replace('"', '"'))
    glossary = raw.get("glossary", [])

    data_sources = []
    entities = []
    attributes = []

    for source in glossary:
        ds_name = source["dataSourceName"]
        root_query = source.get("rootQuery", "")

        data_sources.append(SchemaDataSource(
            dataSource=ds_name,
            name=ds_name,
            rootQuery=root_query,
            params={}
        ))

        for ns in source.get("registeredAttributes", []):
            entity_name = ns["namespace"]
            filters_dict = {k: v for f in ns.get("filters", []) for k, v in f.items() if k != "isMandatory"}

            entities.append(SchemaEntity(
                dataSource=ds_name,
                entityName=entity_name,
                filters=filters_dict,
                gquery=root_query
            ))

            for pg in ns.get("propertygroups", []):
                for attr in pg.get("attributelist", []):
                    attributes.append(SchemaEntityAttribute(
                        dataSource=ds_name,
                        entityName=entity_name,
                        attributeName=attr["attributeName"],
                        parentAttributeName=pg.get("name"),
                        source=attr.get("jsonPath", attr.get("JsonPath", "")).split(".")[1] if "." in attr.get("jsonPath", attr.get("JsonPath", "")) else None,
                        rateLimit=None
                    ))

            for attr in ns.get("attributeList", []):
                attributes.append(SchemaEntityAttribute(
                    dataSource=ds_name,
                    entityName=entity_name,
                    attributeName=attr["attributeName"],
                    parentAttributeName=None,
                    source=attr.get("jsonPath", attr.get("JsonPath", "")).split(".")[1] if "." in attr.get("jsonPath", attr.get("JsonPath", "")) else None,
                    rateLimit=None
                ))

    return data_sources, entities, attributes

# ---- DB PERSISTENCE ----
def persist_to_db(engine_url: str, data_sources, entities, attributes):
    engine = create_engine(engine_url)
    Base.metadata.create_all(engine)
    with Session(engine) as session:
        for ds in data_sources:
            session.merge(SchemaDataSourceDB(**asdict(ds)))
        for e in entities:
            row = SchemaEntityDB(
                dataSource=e.dataSource,
                entityName=e.entityName,
                filters=json.dumps(e.filters),
                gquery=e.gquery
            )
            session.merge(row)
        for a in attributes:
            session.merge(SchemaEntityAttributeDB(**asdict(a)))
        session.commit()

# ---- GRAPHQL GENERATION ----
def generate_graphql_query(namespace: str, attributes: List[str], filters: Dict[str, str] = None) -> str:
    filter_str = f'({', '.join(f"{k}: \"{v}\"" for k, v in filters.items())})' if filters else ''
    attr_str = "\n  ".join(attributes)
    return f"""
query {{
  {namespace}{filter_str} {{
    {attr_str}
  }}
}}"""

# ---- BULK GRAPHQL GENERATION ----
def generate_all_graphql_queries(entities: List[SchemaEntity], attributes: List[SchemaEntityAttribute]) -> Dict[str, str]:
    query_map = {}
    for entity in entities:
        attr_names = [a.attributeName for a in attributes if a.entityName == entity.entityName and a.dataSource == entity.dataSource]
        gql = generate_graphql_query(entity.entityName, attr_names, entity.filters)
        query_map[entity.entityName] = gql
    return query_map



# Load your JSON here (can be read from file or hardcoded string)
json_input = '''{
  "glossary": [{
    "dataSourceName": "session",
    "rootQuery": "",
    "registeredAttributes": [{
      "namespace": "portsum",
      "propertygroups": [{
        "attributelist": [
          {
            "attributeName": "acctNew",
            "dataType": "Boolean",
            "JsonPath": "s.session.acctNew"
          },
          {
            "attributeName": "regTypeDesc",
            "dataType": "String",
            "JsonPath": "s.session.regTypeDesc"
          }
        ]
      }]
    }]
  }]
}'''

# Run processing
ds, ents, attrs = parse_json_to_models(json_input)

# Save to SQLite DB
#persist_to_db("sqlite:///graphql_metadata.db", ds, ents, attrs)

# Generate GraphQL queries
queries = generate_all_graphql_queries(ents, attrs)

# Print results
for namespace, query in queries.items():
    print(f"--- {namespace} ---")
    print(query)
